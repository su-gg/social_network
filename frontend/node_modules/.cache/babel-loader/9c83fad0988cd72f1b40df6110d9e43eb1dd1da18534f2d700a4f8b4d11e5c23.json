{"ast":null,"code":"var _jsxFileName = \"/Users/suu/social_network/frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:3010/api/auth\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n  const logout = () => {\n    console.log(\"Déconnexion...\");\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    navigate(\"/home\");\n  };\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    console.log(\"Token récupéré :\", token);\n    if (token) {\n      try {\n        const decodedUser = jwtDecode(token);\n        setUser({\n          id: decodedUser.id,\n          name: decodedUser.name,\n          username: decodedUser.username,\n          email: decodedUser.email\n        });\n      } catch (err) {\n        console.error(\"token invalide\", err);\n        logout();\n      }\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      console.log(\"Tentative de connexion avec :\", {\n        email\n      });\n      const {\n        data\n      } = await axios.post(`${API_URL}/login`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      localStorage.setItem(\"token\", data.token);\n      setUser(data.user);\n      navigate(\"/profile\");\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      alert(\"Erreur de connexion. Veuillez vérifier vos identifiants\");\n    }\n  };\n  const register = async (name, username, email, password) => {\n    try {\n      console.log(\"Tentative d'inscription avec :\", {\n        name\n      });\n      await axios.post(`${API_URL}/register`, {\n        name,\n        username,\n        email,\n        password\n      });\n      navigate(\"/login\");\n    } catch (error) {\n      alert(\"Erreur d'inscription. Veuillez essayer à nouveau.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"/48TlfV0adSMEvsbW2gk5sMeopI=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jwtDecode","useNavigate","jsxDEV","_jsxDEV","API_URL","AuthContext","AuthProvider","children","_s","user","setUser","navigate","logout","console","log","localStorage","removeItem","token","getItem","decodedUser","id","name","username","email","err","error","login","password","data","post","withCredentials","setItem","alert","register","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/suu/social_network/frontend/src/context/AuthContext.tsx"],"sourcesContent":["\nimport React, { createContext, useState, useEffect, ReactNode } from \"react\";\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst API_URL = \"http://localhost:3010/api/auth\";\n\ninterface User {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, username: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const navigate = useNavigate();\n\n  const logout = () => {\n    console.log(\"Déconnexion...\");\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    navigate(\"/home\");\n  };\n  \n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    console.log(\"Token récupéré :\", token);\n\n    if (token) {\n      try {\n        const decodedUser: any = jwtDecode(token);\n        setUser({\n          id: decodedUser.id,\n          name: decodedUser.name,\n          username: decodedUser.username,\n          email: decodedUser.email,\n        });\n\n      } catch (err) {\n        console.error (\"token invalide\", err);\n        logout();\n      }\n    }\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      console.log(\"Tentative de connexion avec :\", { email });\n      const { data } = await axios.post(`${API_URL}/login`, { email, password }, { withCredentials: true });\n\n      localStorage.setItem(\"token\", data.token);\n      setUser(data.user);\n      navigate(\"/profile\");\n    } catch (error) {\n      console.error(\"Erreur de connexion :\", error);\n      alert(\"Erreur de connexion. Veuillez vérifier vos identifiants\");\n    }\n  };\n  \n  const register = async (name: string, username: string, email: string, password: string) => {\n    try {\n      console.log(\"Tentative d'inscription avec :\", { name});\n  await axios.post(`${API_URL}/register`, { name, username, email, password });\n\n    navigate(\"/login\");\n    } catch (error) {\n      alert(\"Erreur d'inscription. Veuillez essayer à nouveau.\")\n    }\n    \n  };\n\n\n\n  return (\n    <AuthContext.Provider value={{ user, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}